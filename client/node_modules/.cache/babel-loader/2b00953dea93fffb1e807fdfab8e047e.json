{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\temp\\\\couplove\\\\client\\\\src\\\\SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst ENDPOINT = 'localhost:5000';\nlet socket;\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [userId, setUserId] = useState('');\n  const [roomId, setRoomId] = useState('');\n  const [me, setMe] = useState('');\n  const [newMessage, setNewMessage] = useState([]);\n  const [users, setUsers] = useState([]);\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.on('me', id => {\n      setUsers(users.push(id));\n      setMe(id);\n    });\n    socket.on('dc', id => {\n      users.filter(a => {\n        a = id;\n      });\n    });\n    socket.on('chatMsg', chat => {\n      setNewMessage(chat);\n    });\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const joinRoom = (roomId, userId, nickname) => {\n    socket.emit('join', {\n      userId,\n      roomId\n    });\n    setUserId(userId);\n    setRoomId(roomId);\n    setName(nickname);\n  };\n\n  const sendMsg = (msg, nickname) => {\n    socket.emit('sendMsg', {\n      msg,\n      userId,\n      nickname,\n      roomId\n    });\n  };\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answerCall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  console.log(users.length);\n\n  const callUser = () => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    let partnerId;\n\n    for (var i = 0; i < users.length; i++) {\n      console.log(users[i]);\n\n      if (users[i] === me) {\n        partnerId = users[i];\n      }\n    }\n\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: partnerId,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callAccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      newMessage,\n      sendMsg,\n      joinRoom,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"IKFvGyuqKzre0ZIBMNdo029cHeU=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/PC/temp/couplove/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","ENDPOINT","socket","ContextProvider","children","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","name","setName","call","setCall","userId","setUserId","roomId","setRoomId","me","setMe","newMessage","setNewMessage","users","setUsers","myVideo","userVideo","connectionRef","on","id","push","filter","a","chat","from","callerName","signal","isReceivingCall","joinRoom","nickname","emit","sendMsg","msg","answerCall","peer","initiator","trickle","data","to","currentStream","current","srcObject","console","log","length","callUser","navigator","mediaDevices","getUserMedia","video","audio","then","partnerId","i","userToCall","signalData","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst ENDPOINT='localhost:5000';\r\nlet socket;\r\nconst ContextProvider = ({ children }) => {\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n  const [callEnded, setCallEnded] = useState(false);\r\n  const [stream, setStream] = useState();\r\n  const [name, setName] = useState('');\r\n  const [call, setCall] = useState({});\r\n  const [userId,setUserId] = useState('');\r\n  const [roomId,setRoomId] = useState('');\r\n  const [me,setMe] = useState('');\r\n  const [newMessage,setNewMessage] = useState([]);\r\n  const [users,setUsers] = useState([]);\r\n\r\n\r\n  const myVideo = useRef();\r\n  const userVideo = useRef();\r\n  const connectionRef = useRef();\r\n\r\n  useEffect(() => {\r\n      socket = io(ENDPOINT);\r\n   \r\n    socket.on('me',(id)=>{\r\n       setUsers(users.push(id));\r\n       setMe(id);\r\n    })\r\n    \r\n    socket.on('dc',(id)=>{\r\n       users.filter(a=>{\r\n           a=id;\r\n       });\r\n    })\r\n\r\n    socket.on('chatMsg',(chat)=>{\r\n        setNewMessage(chat);\r\n    })\r\n\r\n    socket.on('calluser', ({ from, name: callerName, signal }) => {\r\n      setCall({ isReceivingCall: true, from, name: callerName, signal });\r\n    });\r\n\r\n    \r\n  }, []);\r\n  const joinRoom = (roomId,userId,nickname) =>{\r\n      socket.emit('join',{userId,roomId});\r\n      setUserId(userId);\r\n      setRoomId(roomId);\r\n      setName(nickname);\r\n  }\r\n\r\n  const sendMsg = (msg,nickname) =>{\r\n      socket.emit('sendMsg',{msg,userId,nickname,roomId})\r\n  }\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true);\r\n\r\n    const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n    peer.on('signal', (data) => {\r\n      socket.emit('answerCall', { signal: data, to: call.from });\r\n    });\r\n\r\n    peer.on('stream', (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    peer.signal(call.signal);\r\n\r\n    connectionRef.current = peer;\r\n  };\r\nconsole.log(users.length);\r\n  const callUser = () => {\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n    .then((currentStream) => {\r\n      setStream(currentStream);\r\n\r\n      myVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    let partnerId;\r\n    for(var i =0;i<users.length;i++)\r\n    {\r\n        console.log(users[i]);\r\n        if(users[i]===me)\r\n        {\r\n            partnerId = users[i];\r\n        }\r\n    }\r\n    const peer = new Peer({ initiator: true, trickle: false, stream });\r\n\r\n    peer.on('signal', (data) => {\r\n      socket.emit('calluser', { userToCall: partnerId, signalData: data, from: me, name });\r\n    });\r\n\r\n    peer.on('stream', (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    socket.on('callAccepted', (signal) => {\r\n      setCallAccepted(true);\r\n\r\n      peer.signal(signal);\r\n    });\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const leaveCall = () => {\r\n    setCallEnded(true);\r\n\r\n    connectionRef.current.destroy();\r\n\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={{\r\n      call,\r\n      callAccepted,\r\n      myVideo,\r\n      newMessage,\r\n      sendMsg,\r\n      joinRoom,\r\n      userVideo,\r\n      stream,\r\n      name,\r\n      setName,\r\n      callEnded,\r\n      callUser,\r\n      leaveCall,\r\n      answerCall,\r\n    }}\r\n    >\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ContextProvider, SocketContext };"]},"metadata":{},"sourceType":"module"}