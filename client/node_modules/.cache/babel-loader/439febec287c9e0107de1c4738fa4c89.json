{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\temp\\\\couplove\\\\client\\\\src\\\\SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst ENDPOINT = 'localhost:5000';\nlet socket;\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [userId, setUserId] = useState('');\n  const [roomId, setRoomId] = useState('');\n  const [newMessage, setNewMessage] = useState([]);\n  const [partnerId, setPartnerId] = useState();\n  const [isOnline, setIsOnline] = useState(true);\n  const [users, setUsers] = useState();\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.on('me', data => {\n      console.log(data.id);\n      console.log(data.users);\n      console.log(data.users.length);\n    });\n    socket.on('dc', data => {\n      // console.log(data.id);\n      console.log(data.users);\n      setUsers(data.users);\n    });\n    socket.on('chatMsg', chat => {\n      setNewMessage(chat);\n    });\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const joinRoom = (roomId, userId, nickname) => {\n    socket.emit('join', {\n      userId,\n      roomId\n    });\n    setUserId(userId);\n    setRoomId(roomId);\n    setPartnerId(partnerId);\n    setName(nickname);\n  };\n\n  const sendMsg = (msg, nickname) => {\n    socket.emit('sendMsg', {\n      msg,\n      userId,\n      nickname,\n      roomId\n    });\n  };\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = () => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        signalData: data,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      console.log(signal);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      newMessage,\n      sendMsg,\n      joinRoom,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      callUser,\n      leaveCall,\n      answerCall,\n      users,\n      isOnline\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"GxX7gpkFx8UkZCcDNl4eVM51Dj0=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/PC/temp/couplove/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","ENDPOINT","socket","ContextProvider","children","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","name","setName","call","setCall","userId","setUserId","roomId","setRoomId","newMessage","setNewMessage","partnerId","setPartnerId","isOnline","setIsOnline","users","setUsers","myVideo","userVideo","connectionRef","on","data","console","log","id","length","chat","from","callerName","signal","isReceivingCall","joinRoom","nickname","emit","sendMsg","msg","answerCall","peer","initiator","trickle","to","currentStream","current","srcObject","callUser","navigator","mediaDevices","getUserMedia","video","audio","then","signalData","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst ENDPOINT='localhost:5000';\r\nlet socket;\r\nconst ContextProvider = ({ children }) => {\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n  const [callEnded, setCallEnded] = useState(false);\r\n  const [stream, setStream] = useState();\r\n  const [name, setName] = useState('');\r\n  const [call, setCall] = useState({});\r\n  const [userId,setUserId] = useState('');\r\n  const [roomId,setRoomId] = useState('');\r\n  const [newMessage,setNewMessage] = useState([]);\r\n  const [partnerId,setPartnerId] = useState();\r\n  const [isOnline,setIsOnline] = useState(true);\r\n  const [users,setUsers] = useState();\r\n\r\n  const myVideo = useRef();\r\n  const userVideo = useRef();\r\n  const connectionRef = useRef();\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    socket = io(ENDPOINT);\r\n    socket.on('me',(data)=>{\r\n        console.log(data.id);\r\n        console.log(data.users);\r\n        console.log(data.users.length)\r\n       \r\n     })\r\n\r\n    socket.on('dc',(data)=>{\r\n        // console.log(data.id);\r\n        console.log(data.users);\r\n        setUsers(data.users);\r\n   })\r\n\r\n    socket.on('chatMsg',(chat)=>{\r\n        setNewMessage(chat);\r\n    })\r\n\r\n    socket.on('calluser', ({ from, name: callerName, signal })=> {\r\n      setCall({ isReceivingCall: true, from, name: callerName, signal });\r\n      \r\n    });\r\n  }, []);\r\n\r\n  \r\n\r\n  \r\n  const joinRoom = (roomId,userId,nickname) =>{\r\n      socket.emit('join',{userId,roomId});\r\n      setUserId(userId);\r\n      setRoomId(roomId);\r\n      setPartnerId(partnerId)\r\n      setName(nickname);\r\n  }\r\n\r\n  const sendMsg = (msg,nickname) =>{\r\n      socket.emit('sendMsg',{msg,userId,nickname,roomId})\r\n  }\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true);\r\n    const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n    peer.on('signal', (data) => {\r\n        \r\n      socket.emit('answercall', { signal: data, to: call.from });\r\n    });\r\n\r\n    peer.on('stream', (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    peer.signal(call.signal);\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n\r\n\r\n  const callUser = () => {\r\n     \r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n    .then((currentStream) => {\r\n      setStream(currentStream);\r\n\r\n      myVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    const peer = new Peer({ initiator: true, trickle: false, stream });\r\n\r\n    peer.on('signal', (data) => {\r\n    socket.emit('calluser', {  signalData: data,  name });\r\n    \r\n    });\r\n\r\n    peer.on('stream', (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    socket.on('callaccepted', (signal) => {\r\n      setCallAccepted(true);\r\n        console.log(signal)\r\n      peer.signal(signal);\r\n    });\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const leaveCall = () => {\r\n    setCallEnded(true);\r\n\r\n    connectionRef.current.destroy();\r\n\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={{\r\n      call,\r\n      callAccepted,\r\n      myVideo,\r\n      newMessage,\r\n      sendMsg,\r\n      joinRoom,\r\n      userVideo,\r\n      stream,\r\n      name,\r\n      setName,\r\n      callEnded,\r\n      callUser,\r\n      leaveCall,\r\n      answerCall,\r\n      users,\r\n      isOnline,\r\n    }}\r\n    >\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ContextProvider, SocketContext };"]},"metadata":{},"sourceType":"module"}