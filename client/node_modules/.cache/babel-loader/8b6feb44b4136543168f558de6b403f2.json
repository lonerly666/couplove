{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\temp\\\\couplove\\\\client\\\\src\\\\SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst ENDPOINT = 'localhost:5000';\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [stream, setStream] = useState();\n  const [me, setMe] = useState('');\n  const [call,, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState('');\n  const [newessages, setMessages] = useState([]);\n  const [partnerStatus, setPartnerStatus] = useState();\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  let socket;\n  useEffect(() => {\n    const ac = new AbortController();\n    socket = io(ENDPOINT);\n    socket.on('chatMsg', chat => {\n      setMessages(prevData => {\n        return [...prevData, chat];\n      });\n    });\n    socket.on('userStatus', status => {\n      setPartnerStatus(status);\n    });\n    socket.on('callUser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivedCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n    return function cancel() {\n      ac.abort();\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, []);\n\n  const sendMsg = (msg, roomId, userId, userNickname) => {\n    socket.emit('sendMsg', {\n      msg,\n      roomId,\n      userId,\n      userNickname\n    });\n  };\n\n  const joinRoom = (roomId, userId) => {\n    socket.emit('join', {\n      roomId,\n      userId\n    });\n  };\n\n  const answerCall = () => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      messages,\n      partnerStatus,\n      joinRoom,\n      sendMsg,\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"uBzdXn/wSXw0E3Z0mqyW7yiW1yw=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/PC/temp/couplove/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","ENDPOINT","ContextProvider","children","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","newessages","setMessages","partnerStatus","setPartnerStatus","myVideo","userVideo","connectionRef","socket","ac","AbortController","on","chat","prevData","status","from","callerName","signal","isReceivedCall","cancel","abort","emit","off","sendMsg","msg","roomId","userId","userNickname","joinRoom","answerCall","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","peer","initiator","trickle","data","to","callUser","id","userToCall","signalData","leaveCall","destroy","window","location","reload","messages"],"mappings":"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","sourcesContent":["import React,{createContext,useState,useRef,useEffect} from 'react';\r\nimport {io} from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\nconst ENDPOINT  = 'localhost:5000';\r\nconst ContextProvider = ({children})=>{\r\nconst [stream,setStream] = useState();\r\nconst [me,setMe] = useState('');\r\nconst [call,,setCall] = useState({});\r\nconst [callAccepted,setCallAccepted] = useState(false);\r\nconst [callEnded,setCallEnded] = useState(false);\r\nconst [name,setName] = useState('');\r\nconst [newessages,setMessages] = useState([]);\r\nconst [partnerStatus,setPartnerStatus] = useState();\r\nconst myVideo = useRef();\r\nconst userVideo = useRef();\r\nconst connectionRef = useRef();\r\n\r\n\r\nlet socket;\r\n\r\n    useEffect(()=>{\r\n        const ac = new AbortController();\r\n        socket = io(ENDPOINT);\r\n\r\n        socket.on('chatMsg',(chat)=>{\r\n            setMessages(prevData=>{\r\n              return [...prevData,chat];\r\n            })\r\n          })\r\n          socket.on('userStatus',(status)=>{  \r\n            setPartnerStatus(status);\r\n          })\r\n\r\n\r\n        socket.on('callUser',({from,name:callerName,signal})=>{\r\n            setCall({isReceivedCall:true,from,name:callerName,signal})\r\n        });\r\n\r\n        return function cancel() {\r\n            ac.abort();\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n          }\r\n    },[])\r\n\r\n    const sendMsg =(msg,roomId,userId,userNickname)=>{\r\n        socket.emit('sendMsg',{msg,roomId,userId,userNickname});\r\n    }\r\n\r\n    const joinRoom =(roomId,userId) =>{\r\n        socket.emit('join',{roomId,userId});\r\n    }\r\n\r\n    const answerCall = () =>{\r\n        navigator.mediaDevices.getUserMedia({video:true,audio:true})\r\n        .then((currentStream)=>{\r\n            setStream(currentStream);\r\n            myVideo.current.srcObject = currentStream;\r\n        })\r\n        setCallAccepted(true);\r\n        const peer = new Peer({initiator:false, trickle:false,stream});\r\n        \r\n\r\n\r\n        peer.on('signal',(data)=>{\r\n            socket.emit('answercall',{signal:data,to:call.from});\r\n        });\r\n\r\n        peer.on('stream',(currentStream)=>{\r\n            userVideo.current.srcObject = currentStream;\r\n        })\r\n\r\n        peer.signal(call.signal);\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n    const callUser = (id) =>{\r\n        const peer = new Peer({initiator:true,trickle:false,stream});\r\n        peer.on('signal',(data)=>{\r\n            socket.emit('calluser',{userToCall:id,signalData:data,from:me,name});           \r\n        });\r\n\r\n        peer.on('stream',(currentStream)=>{\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        socket.on('callaccepted',(signal)=>{\r\n            setCallAccepted(true);\r\n            peer.signal(signal);\r\n        })\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const leaveCall = () =>{\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n        window.location.reload();\r\n    }\r\n    return(\r\n        <SocketContext.Provider value={{messages,partnerStatus,joinRoom,sendMsg,call,callAccepted,myVideo,userVideo,stream,name,setName,callEnded,me,callUser,leaveCall,answerCall,}}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\nexport {ContextProvider,SocketContext};"]},"metadata":{},"sourceType":"module"}