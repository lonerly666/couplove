{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\temp\\\\couplove\\\\client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport { set } from 'mongoose';\nimport InputBox from './InputBox';\nimport '../css/chatroom.css';\nimport ChatNav from './ChatNav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nexport default function ChatRoom(props) {\n  _s();\n\n  const ENDPOINT = 'localhost:5000';\n  const [userInfo, setUserInfo] = useState();\n  const [userId, setUserId] = useState();\n  const [roomId, setRoomId] = useState();\n  const [text, setText] = useState(\"\");\n  const [userNickname, setUserNickname] = useState();\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const ac = new AbortController();\n    socket = io(ENDPOINT);\n    axios.get('/auth/isLoggedIn').then(res => res.data).catch(err => console.log(err)).then(res => {\n      if (res.isLoggedIn) {\n        let userId = res.user._id;\n\n        if (res.user.partner !== null) {\n          axios({\n            method: 'get',\n            url: '/user/getRoomId',\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }).then(res => res.data).catch(err => console.log(err)).then(res => {\n            let roomId = res.roomInfo._id;\n            setRoomId(roomId);\n            socket.emit('join', {\n              roomId,\n              userId\n            });\n          });\n        }\n\n        setUserId(res.user._id);\n        setUserInfo({ ...res.user\n        });\n        setUserNickname(res.user.nickname);\n      }\n    });\n    return function cancel() {\n      ac.abort();\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT]);\n  useEffect(() => {\n    const ac = new AbortController();\n    socket.on('chatMsg', chat => {\n      setMessages(prevData => {\n        return [...prevData, chat];\n      });\n    });\n    return function cancel() {\n      ac.abort();\n    };\n  }, []);\n\n  function handleSendMsg(event) {\n    let msg = document.getElementById(\"chat\").value;\n    event.preventDefault();\n\n    if (msg.length > 0 && roomId) {\n      socket.emit('sendMsg', {\n        msg,\n        roomId,\n        userId,\n        userNickname\n      });\n      setText(\"\");\n    } else {\n      console.log(\"You cant send anything\");\n    }\n\n    document.getElementById(\"chat\").value = null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-background\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ChatNav, {\n        toggle: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMsg,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 11\n  }, this);\n}\n\n_s(ChatRoom, \"IEKP2nsQR8IEMYncYxs4zeDH5Ts=\");\n\n_c = ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/PC/temp/couplove/client/src/components/ChatRoom.js"],"names":["useEffect","useState","useRef","io","axios","set","InputBox","ChatNav","socket","ChatRoom","props","ENDPOINT","userInfo","setUserInfo","userId","setUserId","roomId","setRoomId","text","setText","userNickname","setUserNickname","messages","setMessages","ac","AbortController","get","then","res","data","catch","err","console","log","isLoggedIn","user","_id","partner","method","url","headers","roomInfo","emit","nickname","cancel","abort","off","on","chat","prevData","handleSendMsg","event","msg","document","getElementById","value","preventDefault","length"],"mappings":"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","sourcesContent":["import {useEffect, useState,useRef} from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport { set } from 'mongoose';\r\nimport InputBox from './InputBox';\r\nimport '../css/chatroom.css';\r\nimport ChatNav from './ChatNav';\r\n\r\nlet socket;\r\nexport default function ChatRoom(props)\r\n{\r\n    const ENDPOINT = 'localhost:5000';\r\n    const [userInfo,setUserInfo] = useState();\r\n    const [userId,setUserId] = useState();\r\n    const [roomId,setRoomId] = useState();\r\n    const [text,setText] = useState(\"\");\r\n    const [userNickname,setUserNickname] = useState();\r\n    const [messages,setMessages] = useState([]);\r\n\r\n\r\n    useEffect(()=>{\r\n        const ac = new AbortController();\r\n        socket = io(ENDPOINT);\r\n        axios.get('/auth/isLoggedIn')\r\n        .then(res =>res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if(res.isLoggedIn)\r\n            {\r\n              let userId = res.user._id;\r\n                if(res.user.partner!==null)\r\n                { \r\n                  axios({ \r\n                    method:'get',\r\n                    url:'/user/getRoomId',\r\n                    headers: {'Content-Type': 'multipart/form-data'}\r\n                  })\r\n                  .then(res=>res.data)\r\n                  .catch(err=>console.log(err))\r\n                  .then(res=>{\r\n                    let roomId = res.roomInfo._id;\r\n                    setRoomId(roomId);\r\n                    \r\n                    socket.emit('join',{roomId,userId});\r\n                  })\r\n                }\r\n                setUserId(res.user._id);\r\n                setUserInfo({...res.user});\r\n                setUserNickname(res.user.nickname);\r\n            }\r\n        });\r\n\r\n        \r\n        return function cancel() {\r\n            ac.abort();\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n          }\r\n    },[ENDPOINT])\r\n\r\n    useEffect(()=>{\r\n      const ac = new AbortController();\r\n      socket.on('chatMsg',(chat)=>{\r\n        setMessages(prevData=>{\r\n          return [...prevData,chat];\r\n        })\r\n      })\r\n      return function cancel() {\r\n        ac.abort();\r\n      }\r\n    },[]);\r\n\r\n    \r\n\r\n    function handleSendMsg(event)\r\n    {\r\n      let msg = document.getElementById(\"chat\").value;\r\n      event.preventDefault();\r\n      if(msg.length>0&&roomId)\r\n      {\r\n        socket.emit('sendMsg',{msg,roomId,userId,userNickname});\r\n        setText(\"\");\r\n      }\r\n      else{\r\n        console.log(\"You cant send anything\")\r\n      }\r\n      document.getElementById(\"chat\").value = null;\r\n    }\r\n\r\n    return<div className=\"chat-background\">\r\n        <div>\r\n          <ChatNav toggle />\r\n        </div>\r\n        <form onSubmit={handleSendMsg}>\r\n        <input type=\"text\" id=\"chat\"/>\r\n        <input type=\"submit\"/>\r\n        </form>\r\n        <InputBox />\r\n    </div>\r\n}"]},"metadata":{},"sourceType":"module"}