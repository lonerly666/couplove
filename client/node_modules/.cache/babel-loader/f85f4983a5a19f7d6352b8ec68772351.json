{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\temp\\\\couplove\\\\client\\\\src\\\\SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst ENDPOINT = 'localhost:5000';\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [stream, setStream] = useState();\n  const [me, setMe] = useState('');\n  const [call,, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  let socket;\n  useEffect(() => {\n    const ac = new AbortController();\n    socket = io(ENDPOINT);\n    socket.on('chatMsg', chat => {\n      setMessages(prevData => {\n        return [...prevData, chat];\n      });\n    });\n    socket.on('userStatus', status => {\n      setPartnerStatus(status);\n    });\n    socket.on('callUser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivedCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n    return function cancel() {\n      ac.abort();\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, []);\n\n  const joinRoom = (roomId, userId) => {\n    socket.emit('join', {\n      roomId,\n      userId\n    });\n  };\n\n  const answerCall = () => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"tsXefHLZPRi+S33/xZVRfEieG7M=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/PC/temp/couplove/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","ENDPOINT","ContextProvider","children","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","socket","ac","AbortController","on","chat","setMessages","prevData","status","setPartnerStatus","from","callerName","signal","isReceivedCall","cancel","abort","emit","off","joinRoom","roomId","userId","answerCall","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","peer","initiator","trickle","data","to","callUser","id","userToCall","signalData","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React,{createContext,useState,useRef,useEffect} from 'react';\r\nimport {io} from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\nconst ENDPOINT  = 'localhost:5000';\r\nconst ContextProvider = ({children})=>{\r\nconst [stream,setStream] = useState();\r\nconst [me,setMe] = useState('');\r\nconst [call,,setCall] = useState({});\r\nconst [callAccepted,setCallAccepted] = useState(false);\r\nconst [callEnded,setCallEnded] = useState(false);\r\nconst [name,setName] = useState('');\r\n\r\nconst myVideo = useRef();\r\nconst userVideo = useRef();\r\nconst connectionRef = useRef();\r\n\r\n\r\nlet socket;\r\n\r\n    useEffect(()=>{\r\n        const ac = new AbortController();\r\n        socket = io(ENDPOINT);\r\n\r\n        socket.on('chatMsg',(chat)=>{\r\n            setMessages(prevData=>{\r\n              return [...prevData,chat];\r\n            })\r\n          })\r\n          socket.on('userStatus',(status)=>{  \r\n            setPartnerStatus(status);\r\n          })\r\n\r\n\r\n        socket.on('callUser',({from,name:callerName,signal})=>{\r\n            setCall({isReceivedCall:true,from,name:callerName,signal})\r\n        });\r\n\r\n        return function cancel() {\r\n            ac.abort();\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n          }\r\n    },[])\r\n\r\n\r\n    const joinRoom =(roomId,userId) =>{\r\n        socket.emit('join',{roomId,userId});\r\n    }\r\n\r\n    const answerCall = () =>{\r\n        navigator.mediaDevices.getUserMedia({video:true,audio:true})\r\n        .then((currentStream)=>{\r\n            setStream(currentStream);\r\n            myVideo.current.srcObject = currentStream;\r\n        })\r\n        setCallAccepted(true);\r\n        const peer = new Peer({initiator:false, trickle:false,stream});\r\n        \r\n\r\n\r\n        peer.on('signal',(data)=>{\r\n            socket.emit('answercall',{signal:data,to:call.from});\r\n        });\r\n\r\n        peer.on('stream',(currentStream)=>{\r\n            userVideo.current.srcObject = currentStream;\r\n        })\r\n\r\n        peer.signal(call.signal);\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n    const callUser = (id) =>{\r\n        const peer = new Peer({initiator:true,trickle:false,stream});\r\n        peer.on('signal',(data)=>{\r\n            socket.emit('calluser',{userToCall:id,signalData:data,from:me,name});           \r\n        });\r\n\r\n        peer.on('stream',(currentStream)=>{\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        socket.on('callaccepted',(signal)=>{\r\n            setCallAccepted(true);\r\n            peer.signal(signal);\r\n        })\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const leaveCall = () =>{\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n        window.location.reload();\r\n    }\r\n    return(\r\n        <SocketContext.Provider value={{call,callAccepted,myVideo,userVideo,stream,name,setName,callEnded,me,callUser,leaveCall,answerCall,}}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\nexport {ContextProvider,SocketContext};"]},"metadata":{},"sourceType":"module"}